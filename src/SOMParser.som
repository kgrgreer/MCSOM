SOMParser = Grammar (
  "translated from: https://github.com/SOM-st/SOM/blob/master/specification/SOM.g4"

  program = ( ^ (self sym: #Classdef) plus )

  Classdef = ( ^ self nt: (self sym: #classdef) )

  classdef = ( ^
    (self sym: #Identifier) , self Equal , self superclass ,
    self NewTerm ,
      self instanceFields ,
      self method star ,
      (
        self Separator ,
        self classFields ,
        (self method star)
      ) optional ,
    self EndTerm
  )

  superclass = ( ^
    self Identifier optional
  )

  instanceFields = ( ^
    ( self Or , self variable star , self Or ) optional
  )

  classFields = ( ^
    ( self Or , self variable star , self Or ) optional
  )

  method = ( ^
    (self sym: #pattern) , self Equal , ( self STPrimitive || self methodBlock )
  )

  pattern = ( ^
    (self sym: #keywordPattern) || (self sym: #binaryPattern) || (self sym: #unaryPattern)
  )

  unaryPattern = (
    ^ self unarySelector
    action: [ :u | ASTPattern signature: u ]
  )

  binaryPattern = (
    ^ self binarySelector , self argument
    action: [ :u | ASTPattern signature: ((u at: 1) + '_C') args: (Array with: (u at: 2)) ]
  )

  keywordPattern = ( ^
    ( self keyword , self argument ) plus
    action: [ :a |
      ASTPattern
        signature: ((a asArray collect: [ :e | (e at: 1) at: 1 ]) inject: '' into: [ :s :e | s + e + '_' ])
        args:      (a asArray collect: [ :e | e at: 2 ])
    ]
  )

  methodBlock = ( ^
    (self NewTerm , (self blockContents optional), self EndTerm) action: [ :b | b at: 2 ]
  )

  unarySelector = ( ^ self sym: #identifier )

  binarySelector = ( ^
    self Or   || self Comma || self Minus || self Equal || self Not  ||
    self And  || self Star  || self Div   || self Mod   || self Plus ||
    self More || self Less  || self At    || self Per   || self OperatorSequence
  )

  identifier = ( ^ self STPrimitive || (self sym: #Identifier) )

  keyword = ( ^ self Keyword )

  argument = ( ^ self variable )

  blockContents = ( ^
    ( self Or , self localDefs , self Or ) optional ,
    self blockBody
  )

  localDefs = ( ^ self variable star )

  blockBody = ( ^
    (self sym: #Exit) , (self sym: #result) ||
    ((self sym: #expression) , ( self Period , ((self sym: #blockBody) optional)) optional)
  )

  result = ( ^
    self expression , self Period optional
  )

  expression = ( ^ self assignation || self evaluation )

  assignation = ( ^ self assignments , self evaluation action: [ :a |
    ASTAssignment var: (((a at: 1) at: 1) at: 1) expr: (a at: 2)
  ])

  assignments = ( ^ self assignment plus )

  assignment = ( ^ self variable , self Assign )

  evaluation = ( ^ self primary , self messages optional )

  primary = ( ^
    self variable            ||
    (self sym: #nestedTerm)  ||
    (self sym: #nestedBlock) ||
    (self sym: #literal)
  )

  variable = ( ^ self identifier )

  messages = ( ^
    (
      self unaryMessage plus ,
      self binaryMessage star ,
      self keywordMessage optional
    ) ||
    (self binaryMessage plus , self keywordMessage optional ) ||
    self keywordMessage
  )

  unaryMessage = ( ^ self sym: #unarySelector )

  binaryMessage = (
    ^ (self sym: #binarySelector) , self binaryOperand
    action: [ :u |
      ASTMessage selector: (u at: 1) arg: (u at: 2)
    ]
  )

  binaryOperand = (
    ^ self primary , self unaryMessage star
    action: [ :o | | m a |
      m := o at: 1.
      a := o at: 2.
      a do: [ :e | m := ASTMessage obj: m selector: e ].
      m
    ]
  )

  keywordMessage = ( ^ ( self keyword , self formula ) plus )

  formula = ( ^ self binaryOperand , self binaryMessage star )

  nestedTerm = ( ^
    self NewTerm , (self sym: #expression) , self EndTerm action: [ :t | t at: 2 ]
  )

  literal = ( ^
    ((self sym: #literalArray)  action: [ :l | ASTLiteral new: l ]) ||
    ((self sym: #literalSymbol) action: [ :l | ASTLiteral new: l ]) ||
    ((self sym: #literalString) action: [ :l | ASTLiteral new: l ]) ||
    ((self sym: #literalNumber) action: [ :l | ASTNumber new: l ])
  )

  literalArray = ( ^
    self Pound ,
    self NewTerm ,
      self literal star ,
    self EndTerm
  )

  "
    Combines negative and positive Integer and Double into one symbol from
    original grammar to avoid backtracking.
  "
  literalNumber = ( ^ self Number )

  literalSymbol = ( ^ self Pound , ( self string || self selector ))

  literalString = ( ^ (self string) )

  selector = ( ^ (self sym: #binarySelector) || (self sym: #keywordSelector) || (self sym: #unarySelector) )

  keywordSelector = ( ^ self Keyword || self KeywordSequence )

  string = ( ^ self STString )

  nestedBlock = ( ^
    self NewBlock ,
      (self sym: #blockPattern)  optional ,
      (self sym: #blockContents) optional ,
    self EndBlock
  )

  blockPattern = ( ^ (self blockArguments) , (self Or) )

  blockArguments = ( ^ ((self Colon) , (self argument)) plus )

  Number = ( ^ self nt:
    (Literal new: '-') optional,
    self Num plus ,
    ((Literal new: '.') , self Num plus) optional
  )

  Alpha = ( ^ (Range from: 'a' to: 'z') || (Range from: 'A' to: 'Z') )

  Num = ( ^ Range from: '0' to: '9' )

  AlphaNum = ( ^ self Alpha || self Num )

  Identifier = ( ^ self nt: self Alpha , self AlphaNum star )

  STPrimitive = ( ^ self nt: 'primitive' )

  Separator = ( ^ self nt: (Repeat parser: '-' min: 4) )

  Equal    = ( ^ self nt: (Literal new: '='  value: 'Equal')  )
  NewTerm  = ( ^ self nt: (Literal new: '('  value: 'NewTerm')  )
  EndTerm  = ( ^ self nt: (Literal new: ')'  value: 'EndTerm')  )
  Or       = ( ^ self nt: (Literal new: '|'  value: 'Or')  )
  Comma    = ( ^ self nt: (Literal new: ','  value: 'Comma')  )
  Minus    = ( ^ self nt: (Literal new: '-'  value: 'Minus')  )
  Not      = ( ^ self nt: (Literal new: '~'  value: 'Not')  )
  And      = ( ^ self nt: (Literal new: '&'  value: 'And')  )
  Star     = ( ^ self nt: (Literal new: '*'  value: 'Star')  )
  Div      = ( ^ self nt: (Literal new: '/'  value: 'Div')  )
  Mod      = ( ^ self nt: (Literal new: '\\' value: 'Mod') )
  Plus     = ( ^ self nt: (Literal new: '+'  value: 'Plus') )
  More     = ( ^ self nt: (Literal new: '>'  value: 'More')  )
  Less     = ( ^ self nt: (Literal new: '<'  value: 'Less')  )
  At       = ( ^ self nt: (Literal new: '@'  value: 'At')  )
  Per      = ( ^ self nt: (Literal new: '%'  value: 'Per')  )
  Colon    = ( ^ self nt: (Literal new: ':'  value: 'Colon')  )
  NewBlock = ( ^ self nt: (Literal new: '['  value: 'NewBlock')  )
  EndBlock = ( ^ self nt: (Literal new: ']'  value: 'EndBlock')  )
  Pound    = ( ^ self nt: (Literal new: '#'  value: 'Pound')  )
  Exit     = ( ^ self nt: (Literal new: '^'  value: 'Exit')  )
  Period   = ( ^ self nt: (Literal new: '.'  value: 'Period')  )
  Assign   = ( ^ self nt: (Literal new: ':=' value: 'Assign') )

  OperatorSequence = ( ^
    (
      self Not   || self And  || self Or    || self Star || self Div  ||
      self Mod   || self Plus || self Equal || self More || self Less ||
      self Comma || self At   || self Per   || self Minus
    ) plus
  )

  Keyword = ( ^ self nt: self Identifier , self Colon )

  KeywordSequence = ( ^ self Keyword plus )

  STStringChar = ( ^
    (Literal new: '\\t') ||
    '\\b'  ||
    '\\n'  ||
    '\\r'  ||
    '\\f'  ||
    '\\0'  ||
    '\\\'' ||
    '\\\\' ||
    (NotChars new: '\\\'')
  )

  STString = ( ^ self nt:
    ((Literal new: '\'') , self STStringChar star , '\'')
  )

  Comment = ( ^ (Literal new: '"') , ((NotChars new: '"') star) , '"' )

  Whitespace = ( ^ ((Literal new: ' ') || '\t' || '\r' || '\n') plus )

  SKIP = ( ^ (self Whitespace || self Comment) star )

----

)
