langTest = (
  | interp |

  test: m with: str = ( | res |
    ('TESTING: ' + m + ' with ' + str) println.
    res := ((interp perform: m) parse: (Stream newWithStr: (str + '  '))).
    ('result: ' + res + ' value: \'' + (res value class) + '\'') println.
    '' println.
  )

  run = (
    interp := AttributeGrammar  new.

self test: #program with: 'Integer = (
  + argument = primitive
  asString   = primitive
  println    = primitive
  asString   = primitive
)

String = (
  + argument = primitive
  asString   = primitive
  println    = primitive
  length     = primitive
  asString   = ( ^ self )
)

True = (
    "Converting"
    asString       = ( ^\'true\' )

    "Conditional evaluation"
    ifTrue:  block = ( ^block value )
    ifFalse: block = ( ^nil )

    "Logical operations"
    not        = ( ^false )
    or: block  = ( ^true )
    and: block = ( ^block value )
)

False = (

    "Converting"
    asString       = ( ^\'false\' )

    "Conditional evaluation"
    ifTrue:  block = ( ^nil )
    ifFalse: block = ( ^block value )

    "Logical operations"
    not        = ( ^true )
    or: block  = ( ^block value )
    and: block = ( ^false )

)

Nil = (

    "Converting"
    asString = ( ^\'nil\' )

    "Comparing"
    isNil    = ( ^true )
    notNil   = ( ^false )

    "Convenience"
    ifNil: aBlock = (^aBlock value)
    ifNotNil: aBlock = (^self)
    ifNil: goBlock ifNotNil: noGoBlock = (^goBlock value)
    "TODO: next line doesn\'t parse for some reason"
    "do: block = ( )"
)

Test = (
  main = (
    1 println.
    \'abc\' println.
    true println.
    false println.
    nil println.
    1 + 2 println.
  )
)
'.
    CGenerator instance toC println.

    'Done.' println.
  )
)
