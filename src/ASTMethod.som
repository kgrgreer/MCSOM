ASTMethod = (
  | holder pattern localDefs block isPrimitive index |

  holder:      v = ( holder      := v )
  pattern        = ( ^pattern )
  index:       v = ( index       := v )
  index          = ( ^index )
  pattern:     v = ( pattern     := v )
  localDefs:   v = ( localDefs   := v )
  block:       v = ( block       := v )
  isPrimitive    = ( ^isPrimitive )
  isPrimitive: v = ( isPrimitive := v )
  signature      = ( ^ pattern name )
  args           = ( ^ pattern args )

  block = (
    isPrimitive
      ifTrue: [ ^ '"primitive"\n  ' + (holder name) + ' ' + pattern ]
      ifFalse: [ ^ block ]
  )

  asString = ( ^ self toC )

  toC = ( | s |
    holder ifNil: [ holder := Object ].
    s := '\n'.
    s := s + '\nSObject ' + (holder name) + '_' + pattern + '(SObject self_'.
    pattern args do: [ :a |
      s := s + ', SObject ' + a
    ].
    s := s + ') {\n'.
    s := s + '  ' + (holder name) + ' self = (' + (holder name) + ') self_;\n'.    localDefs ifNotNil: [
      localDefs do: [ :def |
        s := s + '  SObject ' + def + ' = nil;\n'
      ].
      s := s + '\n'
    ].
    block class println.
"    isPrimitive ifFalse: [ s := s + '  ' + block ]."
    s := s + '  ' + (self block).
    s := s + '\n}\n'.
    ^s
  )

----
  | methods__ |

  methods = (
    methods__ ifNil: [ methods__ := Hashtable new ].
    ^ methods__
  )

  pattern: p block: b = ( | m index |
    m := ASTMethod new.
    m pattern: p.
    b = 'primitive'
      ifTrue:  [ m isPrimitive: true ]
      ifFalse: [
        m isPrimitive: false.
        m block: (b at: 2).
        m localDefs: (b at: 1)
      ].
    index := self methods get: (p signature).
    index ifNil: [
      index := methods__ size + 1.
      methods__ at: (p signature) put: index.
    ].
    m index: index.
    ^m
  )
)
