Assembler = (
  | JGT JEQ JGE JLT JNE JLE JMP  NULL M D MD A AM AD AMD  addr ops syms output |

  toBinary: number = (
    | ret |
    ret := ''.
    14 downTo: 0 do: [ :i | ret := ret + (((1 << i) & number) >>> i). ].
    ^ ret
  )

  sym: s = (
    (syms containsKey: s) ifFalse: [
      (syms at: s put: nil)
    ].
    ^ (syms pairAt: s)
  )

  LABEL: sym = (
    syms at: sym put: addr
  )

  @ arg = (
    (arg class) = Integer ifFalse: [
      | sym |
      sym := self sym: arg.
      sym value = nil ifTrue: [ sym value: addr ].
      arg := sym value
    ].
    self emitA: (self toBinary: arg)
  )

  emit: a = (
    output append: a.
    addr := addr + 1
  )

  emitA: arg = (
    self emit: (Vector new) , '0' , arg
  )

  emitC: op comp: comp jump: jump = (
    self emit: (Vector new) , '111' , op , (ops at: comp) , jump
  )

  NULL: comp jump: jmp  = ( self emitC: '009' comp: comp jump: jmp )
  NULL: comp            = ( self NULL: comp jump: NULL )
  M: comp jump: jmp     = ( self emitC: '001' comp: comp jump: jmp )
  M: comp               = ( self M: comp jump: NULL )
  D: comp jump: jmp     = ( self emitC: '010' comp: comp jump: jmp )
  D: comp               = ( self D: comp jump: NULL )
  MD: comp jump: jmp    = ( self emitC: '011' comp: comp jump: jmp )
  MD: comp              = ( self MD: comp jump: NULL )
  A: comp jump: jmp     = ( self emitC: '100' comp: comp jump: jmp )
  A: comp               = ( self A: comp jump: NULL )
  AM: comp jump: jmp    = ( self emitC: '101' comp: comp jump: jmp )
  AM: comp              = ( self AM: comp jump: NULL )
  AD: comp jump: jmp    = ( self emitC: '110' comp: comp jump: jmp )
  AD: comp              = ( self AM: comp jump: NULL )
  AMD: comp jump: jmp   = ( self emitC: '111' comp: comp jump: jmp )
  AMD: comp             = ( self AMD: comp jump: NULL )
  jump: jmp             = ( self NULL: 0 jump: jmp )

  assemble = (
    output := Vector new.

    NULL        := '000'.
    JGT := M    := '001'.
    JEQ := D    := '010'.
    JGE := MD   := '011'.
    JLT := A    := '100'.
    JNE := AM   := '101'.
    JLE := AD   := '110'.
    JMP := AMD  := '111'.

    syms := Dictionary new.
    syms at: 'SCREEN' put: '16384'.
    syms at: 'KBD'    put: '24576'.
    syms at: 'SP'     put: '0'.
    syms at: 'LCL'    put: '1'.
    syms at: 'ARG'    put: '2'.
    syms at: 'THIS'   put: '3'.
    syms at: 'THAT'   put: '4'.

    "R0..R15 = 0..15"
    0 to: 15 do: [ :i | syms at: ( 'R' + i ) put: i ].

    ops := Dictionary new.
    ops at: 0     put: '0101010'.
    ops at: 1     put: '0111111'.
    ops at: -1    put: '0111010'.
    ops at: D     put: '0001100'.
    ops at: A     put: '0110000'.
    ops at: '0'   put: '0101010'.
    ops at: '1'   put: '0111111'.
    ops at: '-1'  put: '0111010'.
    ops at: 'D'   put: '0001100'.
    ops at: 'A'   put: '0110000'.
    ops at: '!D'  put: '0001101'.
    ops at: '!A'  put: '0110001'.
    ops at: '-D'  put: '0001111'.
    ops at: '-A'  put: '0110011'.
    ops at: 'D+1' put: '0011111'.
    ops at: 'A+1' put: '0110111'.
    ops at: 'D-1' put: '0001110'.
    ops at: 'A-1' put: '0110010'.
    ops at: 'D+A' put: '0000010'.
    ops at: 'D-A' put: '0010011'.
    ops at: 'A-D' put: '0000111'.
    ops at: 'D&A' put: '0000000'.
    ops at: 'D|A' put: '0010101'.
    ops at: M     put: '1110000'.
    ops at: 'M'   put: '1110000'.
    ops at: '!M'  put: '1110001'.
    ops at: '-M'  put: '1110011'.
    ops at: 'M+1' put: '1110111'.
    ops at: 'M-1' put: '1110010'.
    ops at: 'D+M' put: '1000010'.
    ops at: 'D-M' put: '1010011'.
    ops at: 'M-D' put: '1000111'.
    ops at: 'D&M' put: '1000000'.
    ops at: 'D|M' put: '1010101'.

    addr := 16.
    self code.
    output do: [ :a |
      a do: [ :e | e print ].
      '' println
    ]
  )

  code = (
   " Computes 1+...+RAM[0] "
   " And stored the sum in RAM[1] "
    self @ 'i'.
    self M:  1.    "i = 1"
    self @ 'sum'.
    self M: 0.     "sum = 0"
    self LABEL: #LOOP.
    self @ 'i'. " if i > RAM[0] goto WRITE"
    self D: M.
    self @ 'R0'.
    self D: 'D-M'.
    self @ 'WRITE'.
    self D: 0 jump: JGT.
    self @ 'i'. "sum += 1"
    self D: M.
    self @ 'sum'.
    self M: 'D+M'.
    self @ 'i'. "i++"
    self M: 'M+1'.
    self @ #LOOP.
    self jump: JMP. "GOTO LOOP"

    self LABEL: #WRITE.
    self @ 'sum'.
    self D: M.
    self @ 'R1'.
    self M: D. "RAM[1] = the sum"

    self LABEL: #END.
    self @ #END.
    self jump: JMP.


    "
    // Computes 1+...+RAM[0]
// And stored the sum in RAM[1]
@i
M=1 // i = 1
@sum
M=0 // sum = 0
(LOOP)
@i // if i>RAM[0] goto WRITE
D=M
@R0
D=D‚ÄêM
@WRITE
D;JGT
@i // sum += i
D=M
@sum
M=D+M
@i // i++
M=M+1
@LOOP // goto LOOP
0;JMP
(WRITE)
@sum
D=M
@R1
M=D // RAM[1] = the sum
(END)
@END
0;JMP"

  )

  run = (self assemble)

)
