Assembler = (
  |
    " Program Counter - Memory location of next instruction. Starts at 16. "
    pc

    " Dictionary of Opcode Mnemonics to Binary Encodings "
    ops

    " Symbol Table "
    syms

    " A Vector of Emitted Machine Code "
    output

    " Jump Operators "
    NULL JGT JEQ JGE JLT JNE JLE JMP
  |

  toBinary: number = ( | ret |
    "Encode an Integer as a 15 digit Binary String"
    ret := ''.
    14 downTo: 0 do: [ :i | ret := ret + (((1 << i) & number) >>> i). ].
    ^ ret
  )

  sym: s = (
    (syms containsKey: s) ifFalse: [
      syms at: s put: nil
    ].
    ^ syms pairAt: s
  )

  LABEL: sym = ( syms at: sym put: pc )

  @ arg = (
    (arg class) = Integer ifFalse: [
      | sym |
      sym := self sym: arg.
      sym value = nil ifTrue: [ sym value: pc ].
      arg := sym
    ].
    self emit: (Vector new) , '0' , arg
  )

  emit: a = (
    'emit: ' print. a println.
    output append: a. pc := pc + 1
  )

  emit: op comp: comp jump: jump = (
    self emit: (Vector new) , '111' , op , (ops at: comp) , jump
  )

  NULL: comp jump: jmp  = ( self emit: '000' comp: comp jump: jmp )
  NULL: comp            = ( self NULL: comp jump: NULL )
  M: comp jump: jmp     = ( self emit: '001' comp: comp jump: jmp )
  M: comp               = ( self M: comp jump: NULL )
  D: comp jump: jmp     = ( self emit: '010' comp: comp jump: jmp )
  D: comp               = ( self D: comp jump: NULL )
  MD: comp jump: jmp    = ( self emit: '011' comp: comp jump: jmp )
  MD: comp              = ( self MD: comp jump: NULL )
  A: comp jump: jmp     = ( self emit: '100' comp: comp jump: jmp )
  A: comp               = ( self A: comp jump: NULL )
  AM: comp jump: jmp    = ( self emit: '101' comp: comp jump: jmp )
  AM: comp              = ( self AM: comp jump: NULL )
  AD: comp jump: jmp    = ( self emit: '110' comp: comp jump: jmp )
  AD: comp              = ( self AM: comp jump: NULL )
  AMD: comp jump: jmp   = ( self emit: '111' comp: comp jump: jmp )
  AMD: comp             = ( self AMD: comp jump: NULL )

  jump: jmp             = ( self NULL: '0' jump: jmp )

  init = (
    output := Vector new.
    pc := 0.

    syms := Dictionary new.
    syms at: 'SCREEN' put: '16384'. "0x4000"
    syms at: 'KBD'    put: '24576'. "0x6000"
    syms at: 'SP'     put: '0'.
    syms at: 'LCL'    put: '1'.
    syms at: 'ARG'    put: '2'.
    syms at: 'THIS'   put: '3'.
    syms at: 'THAT'   put: '4'.

    "R0..R15 = 0..15"
    0 to: 15 do: [ :i | syms at: ( 'R' + i ) put: i ].

    ops := Dictionary new.
    ops at: '0'   put: '0101010'.
    ops at: '1'   put: '0111111'.
    ops at: '-1'  put: '0111010'.
    ops at: 'D'   put: '0001100'.
    ops at: 'A'   put: '0110000'.  ops at: 'M'   put: '1110000'.
    ops at: '!D'  put: '0001101'.  ops at: '!M'  put: '1110001'.
    ops at: '!A'  put: '0110001'.  ops at: '!M'  put: '1110001'.
    ops at: '-D'  put: '0001111'.
    ops at: '-A'  put: '0110011'.  ops at: '-M'  put: '1110011'.
    ops at: 'D+1' put: '0011111'.
    ops at: 'A+1' put: '0110111'.  ops at: 'M+1' put: '1110111'.
    ops at: 'D-1' put: '0001110'.
    ops at: 'A-1' put: '0110010'.  ops at: 'M-1' put: '1110010'.
    ops at: 'D+A' put: '0000010'.  ops at: 'D+M' put: '1000010'.
    ops at: 'D-A' put: '0010011'.  ops at: 'D-M' put: '1010011'.
    ops at: 'A-D' put: '0000111'.  ops at: 'M-D' put: '1000111'.
    ops at: 'D&A' put: '0000000'.  ops at: 'D&M' put: '1000000'.
    ops at: 'D|A' put: '0010101'.  ops at: 'D|M' put: '1010101'.

    NULL := '000'.  JGT  := '001'.  JEQ  := '010'.  JGE  := '011'.
    JLT  := '100'.  JNE  := '101'.  JLE  := '110'.  JMP  := '111'.

    " Two passes allow for forward symbol references: "
    self code.
    self generate
  )

  generate: o = (
    o class = Pair    ifTrue: [ o := o value. ].
    o class = Integer ifTrue: [ o := self toBinary: o. ].
    o class = String  ifTrue: [ o print ]
  )

  generate = (
    output do: [ :a |
      a do: [ :e | self generate: e ].
      '' println
    ]
  )

  run = (self init)
)
