CGenerator = (
  | classes literals methods prims |

  classes = ( ^classes )

  init = (
    classes  := Vector new.
    literals := Vector new.
    methods  := Vector new.
    prims    := Dictionary new.

    prims at: 'Integer Plus_C' put: '
      return self.num + ((Integer) argument).num;
    '.
    prims at: 'Integer asString' put: '
      return "";
    '.
    prims at: 'Integer println' put: '
      println("%d", self.num);
      return null;
    '.
  )

  addClass: c = ( classes append: c )

  addMethod: m = (
    methods append: m.
    " TODO: set code for primitives"
  )

  addLiteral: l = ( literals append: l )

  getPrimitiveCode: key = ( ^ prims at: key )

  toC = ( | s |
    s := '\n/********************** CGenerator Output **********************/\n\n'.

    (ASTNumber numbers keys) do: [ :l | | value |
      value := (ASTNumber numbers get: l).
      s := s + value toCDef
    ].

    (ASTLiteral literals keys) do: [ :l | | value |
      value := (ASTLiteral literals get: l).
      l class = String ifTrue: [
        s := s + 'const SObject LITERAL_' + l + ' = literal("' + l + '");\n'
      ]
      ifFalse: [
        s := s + 'const SObject LITERAL_' + l + ' = literal(' + l + ');\n'
      ]
    ].

    s := s + '\n'.

    (ASTMethod methods keys) do: [ :m |
      s := s + '#define METHOD_' + m + ' ' + (ASTMethod methods get: m) + '\n'
    ].

    s := s + '\n/* ********************************** DECLARATIONS */\n'.
    classes do: [ :c |
      c == 'String' || [ c == 'Integer' ] ifFalse: [
        s := s + c toH
      ]
    ].

    s := s + '\n/* ********************************** INTERNALS */\n'.
    s := s + '
    String newString(char* str) {
      String obj  = malloc(sizeof(struct String_));
      int len = strlen(str);
      char* buf = malloc(len);
      strcpy(buf, str);
      obj->class  = (Class *) StringClass;
      obj->value  = buf;
      obj->length = newSInteger(len);
      return obj;
    }
    '.

    s := s + '\n/* ********************************** CLASS IMPLEMENTATIONS */\n'.
    classes do: [ :c | s := s + c toC ].
    s := s + '\n'.

    ^ s
  )

----

  | instance_ |

  instance = (
    instance_ ifNil: [
      instance_ := CGenerator new.
      instance_ init.
    ].
    ^ instance_
  )
)
