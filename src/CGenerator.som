CGenerator = (
  | classes literals methods |

  classes = ( ^classes )

  init = (
    classes  := Vector new.
    literals := Vector new.
    methods  := Vector new.
  )

  addClass: c = ( classes append: c )

  addMethod: m = ( methods append: m )

  addLiteral: l = ( literals append: l )

  toC = ( | s |
    s := s + '\n/********************** CGenerator Output **********************/\n\n'.

    (ASTNumber numbers keys) do: [ :l | | value |
      value := (ASTNumber numbers get: l).
      s := s + value toCDef
    ].

    (ASTLiteral literals keys) do: [ :l | | value |
      value := (ASTLiteral literals get: l).
      l class = String ifTrue: [
        s := s + 'const SObject LITERAL_' + l + ' = literal("' + l + '");\n'
      ]
      ifFalse: [
        s := s + 'const SObject LITERAL_' + l + ' = literal(' + l + ');\n'
      ]
    ].

    s := s + '\n'.

    (ASTMethod methods keys) do: [ :m |
      s := s + '#define METHOD_' + m + ' ' + (ASTMethod methods get: m) + '\n'
    ].

    classes do: [ :c |
      c == 'String' || [ c == 'Integer' ] ifFalse: [
        s := s + c toH
      ]
    ].

    classes do: [ :c | s := s + c toC ].
    s := s + '\n'.

    ^ s
  )

----

  | instance_ |

  instance = (
    instance_ ifNil: [
      instance_ := CGenerator new.
      instance_ init.
    ].
    ^ instance_
  )
)
